#+EXPORT_FILE_NAME: emacs_config
#+TITLE: emacs configuration
#+startup: indent

* package sources and inits
** install and require lists
#+BEGIN_SRC emacs-lisp
  (setq install-list '(
                       dirtree
                       pdf-tools
                       popup
                       yasnippet
                       auto-complete
                       ac-math
                       org
                       org-bullets
                       org-ref
                       gnuplot
                       gnuplot-mode))

  (setq require-list '(
                       dirtree
                       pdf-tools
                       popup
                       yasnippet
                       auto-complete-config
                       ac-math
                       org-bullets
                       org-ref
                       ox
                       ox-publish
                       ox-latex
                       ox-beamer
                       ox-twbs
                       ))
#+END_SRC
** archives
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/") 
                         ("melpa" . "https://melpa.org/packages/")
			     ("melpayas" . "http://melpa.milkbox.net/packages/")))
#+END_SRC

** settings and inits
#+BEGIN_SRC emacs-lisp
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(require 'package)
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+END_SRC

** appearance
*** disable splash screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC
*** disable toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
*** disable scroll bar
#+BEGIN_SRC emacs-lisp
(toggle-scroll-bar -1)
#+END_SRC
** encoding and keyboard
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+END_SRC


* packages
** install from install-list
#+BEGIN_SRC emacs-lisp
  (dolist (package install-list)
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC
** require list
#+BEGIN_SRC emacs-lisp
  (dolist (package require-list)
    (require package))
#+END_SRC


* ToDo setup
** keywords and tags
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))

#+END_SRC


* Default settings

** global
#+BEGIN_SRC emacs-lisp
;; turn off #?!&/!!-bell
(setq ring-bell-function 'ignore)

#+END_SRC
** pdf-tools
#+BEGIN_SRC 
(pdf-tools-install)
(setq pdf-annot-activate-created-annotations t)
(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
TeX-source-correlate-start-server t)
#+END_SRC
 
** latex
#+BEGIN_SRC emacs-lisp
(add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
#'TeX-revert-document-buffer)
(add-to-list 'org-latex-classes
             '("beamer"
               "\\documentclass\[presentation\]\{beamer\}"
               ("\\section\{%s\}" . "\\section*\{%s\}")
               ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
               ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))


;; for export purposes
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)

#+END_SRC
** auto-complete
#+BEGIN_SRC emacs-lisp
(add-to-list 'ac-modes 'latex-mode) ; beware of using 'LaTeX-mode instead
(ac-set-trigger-key "TAB")
(ac-set-trigger-key "<tab>")
#+END_SRC

** dired
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook
	  (lambda ()
	    (dired-hide-details-mode)))
#+END_SRC
** org-mode
#+BEGIN_SRC emacs-lisp
;; pretty bullets
(add-hook 'org-mode-hook
	  (lambda ()
	    (org-bullets-mode t)
	    (auto-complete-mode t)))

;; auto-line breaks
(add-hook 'org-mode-hook
	  (lambda ()
	    (auto-fill-mode t)))

;; allow alphabetical numeration
(setq org-list-allow-alphabetical t)

;; publishing settings

(setq org-publish-project-alist
      '(
	("org-notes"
	 :base-directory "~/org/"
	 :base-extension "org"
	 :publishing-directory "~/public_html/"
	 :recursive t
	 :publishing-function org-twbs-publish-to-html
	 :with-sub-superscript nil
	 :headline-levels 4
	 :auto-preamble t
	 )

	("org-static"
	 :base-directory "~/org/"
	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
	 :publishing-directory "~/public_html/"
	 :recursive t
	 :publishing-function org-publish-attachment
	 )

	("org" :components ("org-notes" "org-static"))))

;; babel for latex
;; needed for code block evaluation
(org-babel-do-load-languages
 'org-babel-load-languages
 '((latex .t)))

;; evaluate latex code blocks without asking
(defun my-org-confirm-babel-evaluate (lang body)
  (not (string= lang "latex")))  ;don't ask for latex
(setq org-confirm-babel-evaluate #'my-org-confirm-babel-evaluate)

;; agenda toggle mode
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c l") 'org-store-link)

;; global agenda to-do file
(setq org-agenda-files (quote ("~/todo.org")))
;; global target file for notes
(setq org-default-notes-file (concat org-directory "/notes.org"))

;;set priority range from A to C with default A
(setq org-highest-priority ?A)
(setq org-lowest-priority ?C)
(setq org-default-priority ?A)

;; set priority color
(setq org-priority-faces '((?A . (:foreground "FF6670" :weight bold))
			   (?B . (:foreground "F8FF42"))
			   (?C . (:foreground "60FFFF"))))

(define-key global-map (kbd "C-c c") 'org-capture)
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/todo.org" "Tasks")
         "* TODO %?\n %i\n %a")))
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
;; require latex snippets in org mode
(defun my-org-latex-yas ()
  "Activate org and LaTeX yas expansion in org-mode buffers."
  (yas-minor-mode)
  (yas-activate-extra-mode 'latex-mode))

(add-hook 'org-mode-hook #'my-org-latex-yas)
#+END_SRC
** global enables
#+BEGIN_SRC emacs-lisp
(menu-bar-mode t)
(yas-global-mode 1)
(global-auto-complete-mode t)
#+END_SRC

** spotify
ID and Secret are imported in the ~.emacs~ config file from the
spotify secrets file
 #+BEGIN_SRC emacs-lisp
   (define-key spotify-mode-map (kbd "C-c s") 'spotify-command-map)
   (setq spotify-transport 'connect)
   #+END_SRC


* custom-set-variables
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#2e3436" "#a40000" "#4e9a06" "#c4a000" "#204a87" "#5c3566" "#729fcf" "#eeeeec"])
 '(custom-enabled-themes (quote (manoj-dark)))
 '(package-selected-packages
   (quote
    (pdf-tools markdown-mode+ markdown-mode htmlize dirtree-prosjekt org-bullets dirtree yasnippet-snippets ox-twbs auto-complete-auctex auto-complete auctex))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC

