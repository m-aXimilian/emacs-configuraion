#+EXPORT_FILE_NAME: emacs_config
#+TITLE: emacs configuration
#+startup: indent fold

* Package Sources and Inits
Try ~package-refresh-contents~ as a quickfix when a package is not found.

** install and require lists
#+BEGIN_SRC emacs-lisp
  (setq install-list '(
                       bibtex-completion
                       ace-window
                       dirtree
                       neotree
                       pdf-tools
                       popup
                       yasnippet
                       ivy
                       ivy-bibtex
                       org
                       ox-twbs
                       org-bullets
                       org-ref
                       ob-async
                       org-contrib ;; non gnu
                       gnuplot
                       gnuplot-mode
                       material-theme
                       markdown-mode
                       magit
                       flycheck
                       sly
                       all-the-icons
                       all-the-icons-ibuffer
                       projectile
                       ibuffer-projectile
                       ibuffer-sidebar
                       load-relative
                       elpy
                       rainbow-delimiters
                       cmake-ide
                       yaml-mode
                       visual-fill-column
                       use-package
                       dockerfile-mode
                       sr-speedbar
                       latex-math-preview
                       vue-mode
                       js2-mode
                       json-mode
                       json-reformat
                       all-the-icons-dired
                       highlight-symbol
                       origami
                       paredit
                       clojure-mode
                       clojure-mode-extra-font-locking
                       cider
                       ido-completing-read+
                       tagedit
                       vundo
                       csharp-mode
                       ))


  (setq require-list '(
                       bibtex
                       dirtree
                       neotree
                       pdf-tools
                       popup
                       yasnippet
                       org-ref
                       org-ref-ivy
                       company
                       flycheck
                       eldoc
                       all-the-icons
                       all-the-icons-ibuffer
                       projectile
                       ibuffer-projectile
                       ibuffer-sidebar
                       load-relative
                       elpy
                       cc-mode
                       yaml-mode
                       visual-fill-column
                       use-package
                       dockerfile-mode
                       sr-speedbar
                       json-mode
                       json-reformat
                       highlight-symbol
                       origami
                       ))
#+END_SRC
** archives
#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ("gnu" . "https://elpa.gnu.org/packages/") 
                           ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

** settings and inits
#+BEGIN_SRC emacs-lisp
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(require 'package)
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+END_SRC

** appearance
*** disable splash screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC
*** disable toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
*** disable scroll bar
#+BEGIN_SRC emacs-lisp
(toggle-scroll-bar -1)
#+END_SRC

*** Opacity
Set with ~alpha~ (``This parameter specifies the opacity of the frame,
on graphical displays that support variable opacity. It should be an
integer between 0 and 100, where 0 means completely transparent and
100 means completely opaque. It can also have a nil value, which tells
Emacs not to set the frame opacity (leaving it to the window
manager).'' [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Font-and-Color-Parameters.html][Font and Color Parameters]]) 
#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(98 . 94))
  (add-to-list 'default-frame-alist '(alpha . (98 . 85)))
#+end_src

*** fullscreen on startup
#+begin_src elisp
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src
** encoding and keyboard
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+END_SRC


* Packages Installation and Require
** install from install-list
#+BEGIN_SRC emacs-lisp
  (dolist (package install-list)
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC
** require list
#+BEGIN_SRC emacs-lisp
  (dolist (package require-list)
    (require package))
#+END_SRC


* Globals Settings

** global

#+BEGIN_SRC emacs-lisp
  ;; turn off #?!&/!!-bell
  (setq ring-bell-function 'ignore)
  ;; show row AND col in the status line
  (setq column-number-mode t)
  ;; always auto-revert
  (global-auto-revert-mode 1)
#+END_SRC

** global enables
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (yas-global-mode 1)
  (electric-pair-mode 1)

  (global-flycheck-mode 1)

  (show-paren-mode 1)
#+END_SRC

** key-bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-n") 'switch-to-buffer)
  (global-set-key (kbd "C-c p p") 'projectile-switch-project)
  (global-set-key (kbd "C-c i") 'ibuffer)
#+END_SRC

Latex related
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-p") 'latex-math-preview-expression)
#+END_SRC

Recentf bind to openfiles
#+begin_src elisp
  (global-set-key (kbd "C-c o") 'recentf-open-files)
#+end_src


* Custom Variables
#+begin_src elisp
  (defun variable-set-p (variable)
    "Throw an error if VARIABLE is not defined."
    (when (not (boundp variable))
      (error (format "The variable '%s' is not defined. Set it in your 'init.el' or '.emacs' config file." variable))))
#+end_src
#+begin_src elisp
  (variable-set-p 'my/omnisharp-server-location)
  (variable-set-p 'my/plantuml-jar-path)
  (variable-set-p '*bib-files*)
#+end_src


* Mode and Backend settings
** eglot
#+begin_src elisp
  (use-package eglot
    :ensure t
    :config
    (let ((omnisharp-server my/omnisharp-server-location))
      (if (file-exists-p omnisharp-server)
          (progn
            (add-to-list 'eglot-server-programs
                         `(csharp-mode . (,omnisharp-server "-lsp" "-stdio")))
            (setq eglot-connect-timeout 3000))
        (error "Omnisharp file not found!"))))
#+end_src

** corfu
#+begin_src elisp
  (use-package corfu
    :ensure t
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-auto-prefix 2)
    :init
    (global-corfu-mode)
    (corfu-history-mode))

  (use-package corfu-terminal
    :ensure t)
#+end_src
** vertico
#+begin_src elisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)

    ;; Different scroll margin
    (setq vertico-scroll-margin 0)

    ;; Show more candidates
    (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t))
#+end_src
** marginalia
#+begin_src elisp
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode 1))
#+end_src
** orderless
#+begin_src elisp
  (use-package orderless
  :ensure t
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
** ibuffer
#+begin_src emacs-lisp
  (add-hook 'ibuffer-hook
      (lambda ()
        (ibuffer-projectile-set-filter-groups)
        (unless (eq ibuffer-sorting-mode 'alphabetic)
          (ibuffer-do-sort-by-alphabetic))))
#+end_src
** icons
#+begin_src emacs-lisp
  (unless (find-font (font-spec :name "all-the-icons"))
    (all-the-icons-install-fonts t))
  (setq all-the-icons-scale-factor 1)
  (all-the-icons-ibuffer-mode 1)
#+end_src
** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t)
#+end_src

** dired
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode)))
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+END_SRC

** org-mode

#+BEGIN_SRC emacs-lisp
  ;; loaddefs
  ;; not sure why this was there in there
  ;; (require 'org-loaddefs)

  (defun my/org-init ()
    "Only require the packages related to 'org-mode' when using org."
    (let ((org-requirements '(org-bullets org-contrib ox ox-publish ox-latex
                                          ox-beamer ox-twbs ox-extra ob-async)))
      (dolist (req org-requirements)
        (require req))))

  (defun my/org-visual-column-linum ()
    "Appearance configurations for 'org-mode'."
    (progn
      (setq-default visual-fill-column-width 120)
      (setq-default visual-fill-column-center-text t)
      (setq org-list-allow-alphabetical t)
      (visual-fill-column-mode)
      (visual-line-mode)
      (display-line-numbers-mode -1)))

  (defun my/org-settings ()
    "Consider this for more uncategorized settings like the src-window."
    (setq org-src-window-setup "current-window"))

  (defun my/org-publishing ()
    "Publishing specific settings."
    (setq org-publish-project-alist
        '(("org-notes"
           :base-directory "~/org/"
           :base-extension "org"
           :publishing-directory "~/public_html/"
           :recursive t
           :publishing-function org-twbs-publish-to-html
           :with-sub-superscript nil
           :headline-levels 4
           :auto-preamble t
           )
          ("org-static"
           :base-directory "~/org/"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
           :publishing-directory "~/public_html/"
           :recursive t
           :publishing-function org-publish-attachment
           )
          ("org" :components ("org-notes" "org-static")))))

  (defun my/org-babel-lang ()
    "Which languages shall be loaded into babel."
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((latex . t)
       (gnuplot . t)
       (python . t)
       (C . t)
       (lisp . t))))

  (defun my/eval-w/o-confirmation ()
    "Languages in the list don't require confirmation to be executed."
    (let ((confirmed-babel-langs (lambda (lang body)
                                   (not (or
                                         (string= lang "emacs-lisp")
                                         (string= lang "latex")
                                         (string= lang "elisp")
                                         (string= lang "lisp")
                                         (string= lang "gnuplot")
                                         (string= lang "python")
                                         (string= lang "dot")
                                         (string= lang "C++"))))))
      (setq org-confirm-babel-evaluate confirmed-babel-langs)))

  (use-package org
    :init (my/org-init)
    :mode (("\\.org$" . org-mode))  
    :ensure 
    :hook
    (org-mode . org-bullets-mode)
    (org-mode . my/org-visual-column-linum)
    (org-mode . my/org-publishing)
    (org-mode . my/org-babel-lang)
    (org-mode . my/eval-w/o-confirmation)
    (org-mode . my/org-settings))
#+END_SRC

#+RESULTS:
: ((\.js\' . js2-mode) (Dockerfile\' . dockerfile-mode) (\.markdown\' . markdown-mode) (\.md\' . markdown-mode) (README\.md\' . gfm-mode) (\.yml\' . yaml-mode) (\.pdf\' . pdf-view-mode) (\.puml\' . plantuml-mode) (\.org$ . org-mode) (\(?:\(?:\.\(?:b\(?:\(?:abel\|ower\)rc\)\|json\(?:ld\)?\)\|composer\.lock\)\'\) . json-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.desktop\(\.in\)?$ . desktop-entry-mode) (CMakeLists\.txt\' . cmake-mode) (\.cmake\' . cmake-mode) (.at' . autotest-mode) (\.asy$ . asy-mode) (\(?:build\|profile\)\.boot\' . clojure-mode) (\.cljs\' . clojurescript-mode) (\.cljc\' . clojurec-mode) (\.\(clj\|cljd\|dtm\|edn\)\' . clojure-mode) (\.cmake\' . cmake-mode) (CMakeLists\.txt\' . cmake-mode) (\.dockerfile\' . dockerfile-mode) ([/\]\(?:Containerfile\|Dockerfile\)\(?:\.[^/\]*\)?\' . dockerfile-mode) (\.gp\' . gnuplot-mode) (\.gnuplot\' . gnuplot-mode) (/git-rebase-todo\' . git-rebase-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.\(plantuml\|pum\|plu\)\' . plantuml-mode) (\.vue\' . vue-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.cs\' . csharp-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.webp\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (\.eld\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|sls\|sld\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . js-json-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) (\.erts\' . erts-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|EPUB\|CBZ\|FB2\|O?XPS\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|epub\|cbz\|fb2\|o?xps\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.mailmap\' . conf-unix-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.heic\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

Some global settings that cannot be added to ~org-mode~ as a hook.

#+begin_src elisp
  ;; agenda toggle mode
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c l") 'org-store-link)

  ;; global agenda to-do file
  (setq org-agenda-files (quote ("~/todo.org")))
  
  ;; global target file for notes
  (setq org-default-notes-file (concat org-directory "~/notes.org"))

  ;;set priority range from A to C with default A
  (setq org-highest-priority ?A)
  (setq org-lowest-priority ?C)
  (setq org-default-priority ?A)

  ;; set priority color
  (setq org-priority-faces '((?A . (:foreground "FF6670" :weight bold))
                             (?B . (:foreground "F8FF42"))
                             (?C . (:foreground "60FFFF"))))

  (define-key global-map (kbd "C-c c") 'org-capture)
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/todo.org" "Tasks")
           "* TODO %?\n %i\n %a")))

  (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))

  (org-reload)
#+end_src


Add additional html-export that embeds images into the generated html.
Mostly copied from [[https://niklasfasching.de/posts/org-html-export-inline-images/]]
#+begin_src elisp
  (defun org-html-export-to-mhtml (async subtree visible body)
    (cl-letf (((symbol-function 'org-html--format-image) 'format-image-inline))
      (org-html-export-to-html nil subtree visible body)))

  (defun format-image-inline (source attributes info)
    (let* ((ext (file-name-extension source))
           (prefix (if (string= "svg" ext) "data:image/svg+xml;base64," "data:;base64,"))
           (data (with-temp-buffer (url-insert-file-contents source) (buffer-string)))
           (data-url (concat prefix (base64-encode-string data)))
           (attributes (org-combine-plists `(:src ,data-url) attributes)))
      (org-html-close-tag "img" (org-html--make-attribute-string attributes) info)))

  (org-export-define-derived-backend 'html-inline-images 'html
    :menu-entry '(?h "Export to HTML" ((?m "As MHTML file" org-html-export-to-mhtml))))

  (org-export-define-derived-backend 'html-inline-imgaes 'html
    :menu-entry '(?h "Export to HTML" ((?M "As MHTML file and open"
                                           (lambda (a s v b)
                                             (if a (org-html-export-to-mhtml t s v b)
                                               (org-open-file (org-html-export-to-mhtml nil s v b))))))))
#+end_src

*** ispell
#+begin_src elisp
  (when (executable-find "hunspell")
    (setq ispell-program-name "hunspell"))
#+end_src

** org-ref
Configuration copied from [[https://github.com/jkitchin/org-ref][jkitchin/org-ref]]. Append bib files to the *bib-files* list.

#+BEGIN_SRC emacs-lisp
  ;; Add bib-files to the bibtex-completion list if they can be found
  (dolist (file *bib-files*)
    (if (and (file-exists-p file) (not (member file bibtex-completion-bibliography)))
        (push file bibtex-completion-bibliography)))

  ;; enable org-ref functions and keybindings when there is at least one bib-file present
  (if bibtex-completion-bibliography
      (progn
        (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
              org-ref-insert-cite-function 'org-ref-cite-insert-ivy
              org-ref-insert-label-function 'org-ref-insert-label-link
              org-ref-insert-ref-function 'org-ref-insert-ref-link
              org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))
        (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
        (define-key org-mode-map (kbd "s-[") 'org-ref-insert-link-hydra/body)))
#+END_SRC

** org-roam
On windows [[https://www.msys2.org/][~MSYS~]] is the easiest way to get ~gcc~ which is needed to compile the database for [[https://www.orgroam.com/][org-roam]].

This configuration makes use of an environment variable pointing to the root directory of org-roam, called ~ORGROAM~. Make sure to export this pointing to whatever directory should be used for it. If not using org-roam, setting ~ensure~ to ~nil~ in the following use-package sexp should do the trick.
#+begin_src elisp
  (defun my/get-org-roam-dir ()
    (let ((dir (getenv "ORGROAM")))
      (if (eq nil dir)
          (error "No environment variable 'ORGROAM' was found. Set one and start again.")
        (expand-file-name dir))))

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename (my/get-org-roam-dir)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture))
    :config
    (org-roam-db-autosync-mode)
    (setq org-roam-database-connector 'emacsql-sqlite))
#+end_src

*** org-roam-bibtex
#+begin_src elisp
  ;; Do not call this outside of the `org-roam-bibtex' use-package section as it depends on this package.
  ;; From the doc of `orb-open-attached-file': CITEKEY must be a list for compatibility with `bibtex-completion'
  (defun my/orb-open-attached-file-wrapper ()
    "Only works in org-roam files wiht a 'ROAM_REFS' section containig a citekey that `orb-get-node-citekey' can grab.
  If there is no file attached, do so with `orb-note-actions'."
    (interactive)
    (orb-open-attached-file (list (orb-get-node-citekey))))
#+end_src
#+begin_src elisp
  (use-package org-roam-bibtex
    :ensure t
    :after org-roam
    :bind (("C-c b a" . orb-note-actions)
           ("C-c b i" . orb-insert-link)
           ("C-c b o" . my/orb-open-attached-file-wrapper))
    :config
    (require 'org-ref))
#+end_src

** yasnippet
#+BEGIN_SRC emacs-lisp
  ;; require latex snippets in org mode
  (defun my-org-latex-yas ()
    "Activate org and LaTeX yas expansion in org-mode buffers."
    (yas-minor-mode)
    (yas-activate-extra-mode 'latex-mode))

  (add-hook 'org-mode-hook #'my-org-latex-yas)
#+END_SRC

global mode
#+begin_src emacs-lisp
  (yas-global-mode 1)
#+end_src
** ace-window & move window
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'ace-window)
  (global-set-key (kbd "s-j") 'windmove-left)
  (global-set-key (kbd "s-;") 'windmove-right)
#+END_SRC
** sr-speedbar
#+begin_src elisp
  (use-package sr-speedbar
    :ensure t
    :init
    (lambda ()
      (display-line-numbers-mode -1)))
#+end_src
** projectile
#+begin_src emacs-lisp
  (setq projectile-indexing-method 'hybrid)
  (projectile-global-mode)
#+end_src
** neotree
See [[https://www.emacswiki.org/emacs/NeoTree][NeoTree Docs]]
Use icons for file and let the widht be altered.
#+begin_src emacs-lisp
  (setq neo-theme 'icons)
  (setq neo-window-fixed-size nil)
#+end_src

Jump to the current file node when neotree is opened.
#+begin_src emacs-lisp
  (setq neo-smart-open t)
#+end_src

Change neotree when switching projectile project (~projectile-switch-project~)
#+begin_src emacs-lisp
  ;; (setq projectile-switch-project-action 'neotree-projectile-action)
#+end_src

** raibow delimiters
#+begin_src emacs-lisp
    (add-hook 'lisp-mode-hook '(lambda ()
                                  (rainbow-delimiters-mode)
                                  (prettify-symbols-mode)
                                  (display-line-numbers-mode)))
    (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
#+end_src

** recentf
From [[https://www.youtube.com/watch?v=51eSeqcaikM]]
History of recent files
#+begin_src elisp
  (recentf-mode 1)
#+end_src

** savehist
Minibuffer history
#+begin_src elisp
  (setq history-length 10)
  (savehist-mode 1)
#+end_src
** saveplace
Jump back to where the cursor was before closing a file or emacs.
Adds lag when opening a file.
#+begin_src elisp
  (save-place-mode 1)
#+end_src

** highlight symbol
#+begin_src elisp
  (global-set-key [(control f3)] 'highlight-symbol)
  (global-set-key [f3] 'highlight-symbol-next)
  (global-set-key [(shift f3)] 'highlight-symbol-prev)
  (global-set-key [(meta f3)] 'highlight-symbol-query-replace)
#+end_src

** origami
Show/hide text regions.
#+begin_src elisp
  (define-key origami-mode-map (kbd "C-c C-z") 'origami-recursively-toggle-node)
#+end_src

** org-present
#+begin_src elisp
  (defun my/org-present-mode-hook ()
    "Setup org-present-mode."
    (org-display-inline-images))

  (defun my/org-present-mode-hook-quit ()
    "Revert settings from my/org-present-mode-hook when leaving org-present-mode."
    (org-remove-inline-images))

  (use-package org-present
    :ensure t
    :hook ((org-present-mode . my/org-present-mode-hook)
           (org-present-mode-quit . my/org-present-mode-hook-quit)))
#+end_src

** plantuml
#+begin_src elisp
  (use-package plantuml-mode
    :ensure t
    :config
    (when (file-exists-p my/plantuml-jar-path)
      (setq plantuml-jar-path my/plantuml-jar-path))
    (setq plantuml-default-exec-mode 'jar)
    (add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode)))
#+end_src


* Languages
** C/C++
#+begin_src elisp
  (define-key c-mode-base-map (kbd "<f5>") 'compile)
  (define-key c-mode-base-map (kbd "<f6>") 'recompile)
  (add-hook 'c-mode-hook 'origami-mode)
  (add-hook 'c++-mode-hook 'origami-mode)
#+end_src
** common lisp
Check if the ~inferior-lisp-program~ variable is set. If not, try to default it to ~sbcl~
#+begin_src elisp
  (when (not (boundp 'inferior-lisp-program))
    (let ((sbcl (executable-find "sbcl")))
      (if sbcl
          (setq inferior-lisp-program sbcl)
        (error "No lisp compiler identified. Try install sbcl and check if it is in PATH."))))
#+end_src
** latex
#+BEGIN_SRC emacs-lisp
  (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
  #'TeX-revert-document-buffer)
  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass\[presentation\]\{beamer\}"
                 ("\\section\{%s\}" . "\\section*\{%s\}")
                 ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                 ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))


  ;; for export purposes
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)


#+END_SRC

Remove the headline while exporting the content in the respective
subtree using the *ignore* tag.
#+BEGIN_SRC  emacs-lisp
  (ox-extras-activate '(ignore-headlines))
#+END_SRC
** pdf
#+begin_src elisp
  (add-hook 'pdf-view-mode-hook '(lambda () (pdf-tools-enable-minor-modes)))
  (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
#+end_src

** yaml
See [[https://melpa.org/#/yaml-mode]]
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
#+end_src

** python
#+begin_src emacs-lisp

  (elpy-enable)
  (add-to-list 'process-coding-system-alist '("python" . (utf-8 . utf-8)))
    (setq elpy-rpc-python-command "python3")
  (add-hook 'python-mode-hook 'origami-mode)

#+end_src

** makdown
From:
- [[https://jblevins.org/projects/markdown-mode/]]

#+begin_src elisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src

** docker
#+begin_src elisp
  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
#+end_src

** vue
See documentation on [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode-website]]
With ~vue-mode~ and ~lsp-mode~ installed.
Needs a lsp-backend (e.g. ~M-x lsp-install-server ts-ls~ for JavaScript and TypeScript).
#+begin_src elisp
  (use-package lsp-mode
    :commands lsp)

  (use-package vue-mode
    :mode "\\.vue\\'"
    :hook (vue-mode . lsp-deferred))

  (setq js-indent-level 2)
#+end_src

** javascript
Same as [[vue][*vue]] -> needs ~lsp-mode~
#+begin_src elisp
  (use-package js2-mode
    :mode "\\.js\\'"
    :hook (js2-mode . lsp-deferred))
#+end_src


* User functions
*Attention* when using interactive: the first character in the string
 for the interactive function determines the type of the value
 assigned to the argument provided. Multiple arguments in the
 top-level function must be seperated by "\n" characters.

** time-string conversions
#+BEGIN_SRC emacs-lisp
  (defun revert (l)
    "reverts a list"
    (cond
     ((null l) '())
     (t (append (revert (cdr l)) (list (car l))))))
  
  (defun time-to-list (s)
    "generates a list of numbers from :-separetd time string"
    (mapcar 'string-to-number (split-string s ":")))
  
  (defun multiply-lists (l mult acc)
    "multiplies each element of the lists and returns the sum of multiplied tuples"
    (cond
     ((null l) acc)
     (t (multiply-lists (cdr l) (cdr mult) (+ acc (* (car l) (car mult)))))))
  
  (defun make-seconds (s)
    "computes seconds form dd:hh:mm:ss time string" 
    (multiply-lists (revert (time-to-list s)) '(1 60 3600 86400) 0))
  
  (defun seconds-to-time-precise (s)
    "generate time in hh:mm:ss format from seconds"
    (let ((hr (mod s 3600)))
      (let ((mr (mod hr 60)))
        (concat
         (number-to-string (/ (- s hr) 3600))
         ":"
         (number-to-string (/ (- hr mr) 60))
         ":"
         (number-to-string mr)))))
  
  
  (defun minutes-to-time (s)
    "comma-separated minute-value to time mm:ss"
    (let ((f (floor s)))
      (concat
       (number-to-string f)
       ":"
       (number-to-string (round (* (- s f) 60))))))
  
#+END_SRC
** Helpers
#+BEGIN_SRC emacs-lisp
  (defun psi-to-kgcm2 (psi)
    "pressure in psi to kg/cm²"
    (* 0.070307 psi))

  (defun psi-to-gcm2 (psi)
    "pressure in psi to g/cm²"
    (* (psi-to-kgcm2 psi) 1000))

  (defun rpm-to-ms (r rpm)
    "get speed in m/s from disk radius and rpm"
    (let ((u (* 2 pi r))
          (rps (/ rpm 60.0)))
      (* u rps)))

  (defun ms-to-rpm (r ms)
    "get rpm from disk radius and speed in m/s"
    (let ((u (* 2 pi r)))
      (let ((rps (/ ms u)))
        (* rps 60.0))))


  (defun round-to (n d)
    "round the number n to d specified decimals"
    (/ (fround (* (expt 10 d) n)) (expt 10 d)))

  (defun make-link (l)
    (cond
     ((< (length l) 3) (get-link l))
     ((not (equal (substring l 0 3) "[[*")) (get-link l))
     (t l)))

  (defun make-link-append-front (a l)
    (let ((to-link (concat a " " l)))
      (cond
       ((< (length l) 3)
        (get-link to-link))
       ((not (equal (substring l 0 3) "[[*")) 
        (get-link to-link))
       (t l))))

  (defun get-link (l)
    (concat "[[*" l "][" l "]]"))

  (defun a-to-nm (a)
    "convert Å to nm"
    (/ a 10.0))


  (defun nm-to-a (nm)
    "convert nm to Å"
    (* nm 10.0))
#+END_SRC

** Shortcuts
#+BEGIN_SRC emacs-lisp
  (defun inline-src-elisp (ex re)
    "With arguments EX for :exports and RE for :results generate base for src_elisp."

    (interactive "s:exports:\ns:results:")
    (let ((insertion (concat "src_elisp[:exports "
                       ex
                       " :results "
                       re
                       "]{}")))
      (insert insertion))
    (backward-char))
#+END_SRC

** Funciton Bindings
#+BEGIN_SRC emacs-lisp
  (fset 'to-num 'string-to-number)
  (global-set-key (kbd "M-s M-e") 'inline-src-elisp)
#+END_SRC



* ToDo setup
** keywords and tags
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
#+END_SRC





