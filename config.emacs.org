#+EXPORT_FILE_NAME: emacs_config
#+TITLE: emacs configuration
#+startup: indent

* package sources and inits
** install and require lists
#+BEGIN_SRC emacs-lisp
  (setq install-list '(
                       ace-window
                       dirtree
                       neotree
                       pdf-tools
                       popup
                       yasnippet
                       company
                       company-jedi
                       org
                       ox-twbs
                       org-bullets
                       org-ref
                       ob-async
                       org-contrib ;; non gnu
                       gnuplot
                       gnuplot-mode
                       material-theme
                       magit
                       flycheck
                       irony
                       company-irony
                       flycheck-irony
                       irony-eldoc
                       slime
                       slime-company
                       all-the-icons
                       all-the-icons-ibuffer
                       projectile
                       ibuffer-projectile
                       ibuffer-sidebar
                       load-relative
                       elpy
                       rainbow-delimiters
                       ))


  (setq require-list '(
                       dirtree
                       neotree
                       pdf-tools
                       popup
                       yasnippet
                       org-bullets
                       org-ref
                       org-contrib
                       ox
                       ox-publish
                       ox-latex
                       ox-beamer
                       ox-twbs
                       ox-extra ;; from org-contrib
                       ob-async
                       flycheck
                       irony
                       company-irony
                       flycheck-irony
                       eldoc
                       slime
                       slime-company
                       all-the-icons
                       all-the-icons-ibuffer
                       projectile
                       ibuffer-projectile
                       ibuffer-sidebar
                       load-relative
                       elpy
                       ))
#+END_SRC
** archives
#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ("gnu" . "https://elpa.gnu.org/packages/") 
                           ("melpa" . "https://melpa.org/packages/")
                           ("melpayas" . "http://melpa.milkbox.net/packages/")))
#+END_SRC

** settings and inits
#+BEGIN_SRC emacs-lisp
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(require 'package)
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+END_SRC

** appearance
*** disable splash screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC
*** disable toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
*** disable scroll bar
#+BEGIN_SRC emacs-lisp
(toggle-scroll-bar -1)
#+END_SRC

*** Opacity
Set with ~alpha~ (``This parameter specifies the opacity of the frame,
on graphical displays that support variable opacity. It should be an
integer between 0 and 100, where 0 means completely transparent and
100 means completely opaque. It can also have a nil value, which tells
Emacs not to set the frame opacity (leaving it to the window
manager).'' [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Font-and-Color-Parameters.html][Font and Color Parameters]]) 
#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(85 . 50))
  (add-to-list 'default-frame-alist '(alpha . (85 . 50)))
#+end_src
** encoding and keyboard
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+END_SRC


* packages
** install from install-list
#+BEGIN_SRC emacs-lisp
  (dolist (package install-list)
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC
** require list
#+BEGIN_SRC emacs-lisp
  (dolist (package require-list)
    (require package))
#+END_SRC


* ToDo setup
** keywords and tags
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
#+END_SRC 

      
* Default settings

** global

#+BEGIN_SRC emacs-lisp
  ;; turn off #?!&/!!-bell
  (setq ring-bell-function 'ignore)
  ;; show row AND col in the status line
  (setq column-number-mode t)
  ;; always auto-revert
  (global-auto-revert-mode 1)
  ;;
  (global-linum-mode 1)
  ;; disable menu bar
  ;; (menu-bar-mode -1)

#+END_SRC


** global enables
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(yas-global-mode 1)
(electric-pair-mode 1)

(global-flycheck-mode 1)

(show-paren-mode 1)

#+END_SRC
** company
#+begin_src emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))
  (add-hook 'python-mode-hook 'my/python-mode-hook)

  (eval-after-load 'company '(add-to-list 'company-backends 'company-irony))
#+end_src
** irony
*** Prerequisites
- libclang (~apt-get install libclang-dev~)
- clang (~apt-get install clang~)
read
[[https://martinsosic.com/development/emacs/2017/12/09/emacs-cpp-ide.html][emacs c++ editor]]
#+begin_src emacs-lisp
  (unless (irony--find-server-executable) (call-interactively #'irony-install-server))
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)

  (setq-default irony-cdb-compilation-databases '(irony-cdb-libclang
                                                  irony-cdb-clang-complete))

  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  (add-hook 'irony-mode-hook #'irony-eldoc)
#+end_src
** ibuffer
#+begin_src emacs-lisp
  (add-hook 'ibuffer-hook
      (lambda ()
        (ibuffer-projectile-set-filter-groups)
        (unless (eq ibuffer-sorting-mode 'alphabetic)
          (ibuffer-do-sort-by-alphabetic))))
#+end_src
** icons
#+begin_src emacs-lisp
  (unless (find-font (font-spec :name "all-the-icons"))
    (all-the-icons-install-fonts t))
  (setq all-the-icons-scale-factor 1)
  (all-the-icons-ibuffer-mode 1)
#+end_src
** flycheck
#+begin_src emacs-lisp
  (eval-after-load 'flycheck '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
#+end_src
** latex
#+BEGIN_SRC emacs-lisp
  (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
  #'TeX-revert-document-buffer)
  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass\[presentation\]\{beamer\}"
                 ("\\section\{%s\}" . "\\section*\{%s\}")
                 ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                 ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))


  ;; for export purposes
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

#+END_SRC

Remove the headline while exporting the content in the respective
subtree using the *ignore* tag.
#+BEGIN_SRC  emacs-lisp
  (ox-extras-activate '(ignore-headlines))
#+END_SRC

** dired
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode)))

#+END_SRC

** org-mode
#+BEGIN_SRC emacs-lisp
  ;; pretty bullets
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode t)))
  
  ;; auto-line breaks
  (add-hook 'org-mode-hook
            (lambda ()
              (auto-fill-mode t)))
  
  ;; allow alphabetical numeration
  (setq org-list-allow-alphabetical t)
  
  ;; publishing settings
  
  (setq org-publish-project-alist
        '(
          ("org-notes"
           :base-directory "~/org/"
           :base-extension "org"
           :publishing-directory "~/public_html/"
           :recursive t
           :publishing-function org-twbs-publish-to-html
           :with-sub-superscript nil
           :headline-levels 4
           :auto-preamble t
           )
  
          ("org-static"
           :base-directory "~/org/"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
           :publishing-directory "~/public_html/"
           :recursive t
           :publishing-function org-publish-attachment
           )
  
          ("org" :components ("org-notes" "org-static"))))
  
  ;; needed for code block evaluation
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((latex .t)
     (gnuplot .t)
     (python .t)))
  
  ;; evaluate code blocks without asking
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (or
          (string= lang "emacs-lisp")
          (string= lang "latex")
          (string= lang "elisp")
          (string= lang "gnuplot")
          (string= lang "python"))))
  
  (setq org-confirm-babel-evaluate #'my-org-confirm-babel-evaluate)
  
  ;; agenda toggle mode
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c l") 'org-store-link)
  
  ;; global agenda to-do file
  (setq org-agenda-files (quote ("~/todo.org")))
  
  ;; global target file for notes
  (setq org-default-notes-file (concat org-directory "~/notes.org"))
  
  ;;set priority range from A to C with default A
  (setq org-highest-priority ?A)
  (setq org-lowest-priority ?C)
  (setq org-default-priority ?A)
  
  ;; set priority color
  (setq org-priority-faces '((?A . (:foreground "FF6670" :weight bold))
                             (?B . (:foreground "F8FF42"))
                             (?C . (:foreground "60FFFF"))))
  
  (define-key global-map (kbd "C-c c") 'org-capture)
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/todo.org" "Tasks")
           "* TODO %?\n %i\n %a")))
  
  (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
  
  (org-reload)
#+END_SRC
** org-ref
#+BEGIN_SRC emacs-lisp
  (setq reftex-default-bibliography '("~/bib/Promotion.bib"))
  
  (setq org-ref-bibliography-notes "~/bib/notes.org"
        org-ref-default-bibliography '("~/bib/Promotion.bib")
        org-ref-pdf-directory "~/bib/bibtex-pdfs")
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  ;; require latex snippets in org mode
  (defun my-org-latex-yas ()
    "Activate org and LaTeX yas expansion in org-mode buffers."
    (yas-minor-mode)
    (yas-activate-extra-mode 'latex-mode))

  (add-hook 'org-mode-hook #'my-org-latex-yas)
#+END_SRC

global mode
#+begin_src emacs-lisp
  (yas-global-mode 1)
#+end_src
** ace-window
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'ace-window)
#+END_SRC
** key-bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-n") 'switch-to-buffer)
  (global-set-key (kbd "C-c p p") 'projectile-switch-project)
#+END_SRC
** slime
#+begin_src emacs-lisp
  ;;(setq inferior-lisp-program "/opt/sbcl/bin/sbcl")

  ;;(slime-setup '(slime-fancy slime-quicklisp slime-asdf))
  (setq inferior-lisp-program "sbcl" ; Steel Bank Common Lisp
        slime-contribs '(slime-fancy))
#+end_src
** projectile
#+begin_src emacs-lisp
  (setq projectile-indexing-method 'hybrid)
  (projectile-global-mode)
#+end_src
** neotree
See [[https://www.emacswiki.org/emacs/NeoTree][NeoTree Docs]]
Use icons for file and let the widht be altered.
#+begin_src emacs-lisp
  (setq neo-theme 'icons)
  (setq neo-window-fixed-size nil)
#+end_src

Jump to the current file node when neotree is opened.
#+begin_src emacs-lisp
  (setq neo-smart-open t)
#+end_src

Change neotree when switching projectile project (~projectile-switch-project~)
#+begin_src emacs-lisp
  (setq projectile-switch-project-action 'neotree-projectile-action)
#+end_src

** python
#+begin_src emacs-lisp

  (elpy-enable)
  (add-to-list 'process-coding-system-alist '("python" . (utf-8 . utf-8)))
    (setq elpy-rpc-python-command "python3")


#+end_src

** raibow delimiters
#+begin_src emacs-lisp
  (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)
#+end_src


* User functions
*Attention* when using interactive: the first character in the string
 for the interactive function determines the type of the value
 assigned to the argument provided. Multiple arguments in the
 top-level function must be seperated by "\n" characters.
** Sample Documentation

#+BEGIN_SRC emacs-lisp
  (defun new-sample (arg)
    "insert a new org-mode chapter for a sample at the current cursor position"
    (interactive "ssample name: MKU")
    (let ((sample (concat "mku" arg)))
      (let ((insertion
             (concat "* " (upcase sample) "\n"
                     "Questions to answer:\n"
                     "- \n\n"
                     "Comments:\n"
                     "- \n\n"
                     "** Fabrication\n"
                     "#+name: " (downcase sample) "-fab\n"
                     "| no | description | result | comment | date |\n"
                     "|----+-------------+--------+---------+------|\n"
                     "|    |             |        |         |      |\n"
                     "#+TBLFM: $1='(make-link-append-front \"" (downcase sample) "-fab\" $1)\n\n"

                     "** Results \n"
                     )))
        (insert insertion))))

  (defun sputter-step ()
    "insert a new org-mode table for a sputter step at the current cursor position"
    (interactive)
    (let ((tab-id (replace-regexp-in-string " " "-" (org-get-heading) t t)))
      (let ((insertion
             (concat
              "#+name: " tab-id "\n"
              "| element | power(W) | matching network(%:%) | MAN/AUT | dc voltage(V) | Ar flow(sccm) | base pressure(mbar) | sputter pressure(µbar) | Temperature(°C) | time/min |\n"
              "|---------+----------+-----------------------+---------+---------------+---------------+---------------------+------------------------+-----------------+----------|\n"
              "|         |          |                       |         |               |               |                     |                        |                 |          |\n")))
        (insert insertion))))

  (defun resist-step ()
    "insert a new org-mode list template for resist coating step"
    (interactive)
    (let ((insertion
           (concat
            "- prebake=200°C, 1h\n"
            "- resist=AZECI3027 4000rpm 60s\n"
            "- softbake=100°C, 150s\n"
            "- litho\n"
            "  - focus=-0.394\n"
            "  - filling defocus=abs(focus) + 0.01\n"
            "  - modulation=5%,20%\n"
            "  - filter=1.0\n"
            "  - speed=0.5mm/s, 2.0mm/s\n"
            "- post exposure bake=none\n"
            "- developement=AZ726MIF 60s\n"
            "- comments\n"
            )))
      (insert insertion)))

  (defun plasma-etch-step ()
    "insert a new org-mode table for documenting a plasma-dry-etch step
  at the current cursor position"
    (interactive)
    (let ((tab-id (replace-regexp-in-string " " "-" (org-get-heading) t t)))
      (let ((insertion
             (concat
              "#+name: " tab-id "\n"
              "| desired plasma time | ignition time | Ton/s (Tcycle=1min) | Toff/s | total time/min |\n"
              "|---------------------+---------------+---------------------+--------+----------------|\n"
              "|                     |               |                     |        |                |\n"
              "#+TBLFM: @2$4=60 - @2$3::@2$5='(let ((base (/ (string-to-number @2$1) (string-to-number @2$3)))) (+ base (round (/ (* base (string-to-number @2$2)) 20))))"
              )))
        (insert insertion))))

  (defun lift-off-step ()
    "org-mode list basis for a lift-off-step"
    (interactive)
    (let ((insertion (concat
                      "- solvent=\n"
                      "- ultrasonic level=\n"
                      "- temperature=°C\n"
                      "- time=min\n")))
      (insert insertion)))

  (defun gatan-step ()
    "Insert a template for a Gatan deposition step"
    (interactive)
    (let ((insertion
           (concat
            "- device=0001 Gatan ion-beam coater / ion etcher HES\n"
            "- base pressure= mbar\n"
            "- sputter pressure= mbar\n"
            "- rotation= rpm\n"
            "- rocking= °\n"
            "- rates\n"
            "  - Ti (keV) :: Å/s\n"
            "- currents\n"
            "  - keV :: µA/ µA\n"
            "- comment")))
      (insert insertion))
    )

  (defun evaporator-step ()
    "Insert a template for a Gatan deposition step"
    (interactive)
    (let ((insertion
           (concat
            "- device=00067 Aufdampfanlage LEYBOLD HES\n"
            "- base pressure= mbar\n"
            "- sputter pressure= mbar\n"
            "- rates\n"
            "  - Ti :: Å/s\n"
            "- XTAL= %\n"
            "- comment")))
      (insert insertion))
  )
#+END_SRC

** time-string conversions
#+BEGIN_SRC emacs-lisp
  (defun revert (l)
    "reverts a list"
    (cond
     ((null l) '())
     (t (append (revert (cdr l)) (list (car l))))))
  
  (defun time-to-list (s)
    "generates a list of numbers from :-separetd time string"
    (mapcar 'string-to-number (split-string s ":")))
  
  (defun multiply-lists (l mult acc)
    "multiplies each element of the lists and returns the sum of multiplied tuples"
    (cond
     ((null l) acc)
     (t (multiply-lists (cdr l) (cdr mult) (+ acc (* (car l) (car mult)))))))
  
  (defun make-seconds (s)
    "computes seconds form dd:hh:mm:ss time string" 
    (multiply-lists (revert (time-to-list s)) '(1 60 3600 86400) 0))
  
  (defun seconds-to-time-precise (s)
    "generate time in hh:mm:ss format from seconds"
    (let ((hr (mod s 3600)))
      (let ((mr (mod hr 60)))
        (concat
         (number-to-string (/ (- s hr) 3600))
         ":"
         (number-to-string (/ (- hr mr) 60))
         ":"
         (number-to-string mr)))))
  
  
  (defun minutes-to-time (s)
    "comma-separated minute-value to time mm:ss"
    (let ((f (floor s)))
      (concat
       (number-to-string f)
       ":"
       (number-to-string (round (* (- s f) 60))))))
  
#+END_SRC
** Helpers
#+BEGIN_SRC emacs-lisp
  (defun psi-to-kgcm2 (psi)
    "pressure in psi to kg/cm²"
    (* 0.070307 psi))

  (defun psi-to-gcm2 (psi)
    "pressure in psi to g/cm²"
    (* (psi-to-kgcm2 psi) 1000))

  (defun rpm-to-ms (r rpm)
    "get speed in m/s from disk radius and rpm"
    (let ((u (* 2 pi r))
          (rps (/ rpm 60.0)))
      (* u rps)))

  (defun ms-to-rpm (r ms)
    "get rpm from disk radius and speed in m/s"
    (let ((u (* 2 pi r)))
      (let ((rps (/ ms u)))
        (* rps 60.0))))


  (defun round-to (n d)
    "round the number n to d specified decimals"
    (/ (fround (* (expt 10 d) n)) (expt 10 d)))

  (defun make-link (l)
    (cond
     ((< (length l) 3) (get-link l))
     ((not (equal (substring l 0 3) "[[*")) (get-link l))
     (t l)))

  (defun make-link-append-front (a l)
    (let ((to-link (concat a " " l)))
      (cond
       ((< (length l) 3)
        (get-link to-link))
       ((not (equal (substring l 0 3) "[[*")) 
        (get-link to-link))
       (t l))))

  (defun get-link (l)
    (concat "[[*" l "][" l "]]"))

  (defun a-to-nm (a)
    "convert Å to nm"
    (/ a 10.0))


  (defun nm-to-a (nm)
    "convert nm to Å"
    (* nm 10.0))
#+END_SRC

** Shortcuts
#+BEGIN_SRC emacs-lisp
  (defun inline-src-elisp (ex re)
    "With arguments EX for :exports and RE for :results generate base for src_elisp."

    (interactive "s:exports:\ns:results:")
    (let ((insertion (concat "src_elisp[:exports "
                       ex
                       " :results "
                       re
                       "]{}")))
      (insert insertion))
    (backward-char))
#+END_SRC

** Funciton Bindings
#+BEGIN_SRC emacs-lisp
  (fset 'to-num 'string-to-number)
  (global-set-key (kbd "M-s M-e") 'inline-src-elisp)
#+END_SRC


