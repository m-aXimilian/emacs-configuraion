#+EXPORT_FILE_NAME: emacs_config
#+TITLE: emacs configuration
#+startup: indent

* package sources and inits
** archives
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/") 
                         ("melpa" . "https://melpa.org/packages/")
			 ("melpayas" . "http://melpa.milkbox.net/packages/")))
#+END_SRC

** settings and inits
#+BEGIN_SRC emacs-lisp
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(require 'package)
(package-initialize)
#+END_SRC

** encoding and keyboard
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+END_SRC


* packages
** require list
#+BEGIN_SRC emacs-lisp
(require 'dirtree)
(require 'pdf-tools)
(require 'popup)
(require 'yasnippet)
(require 'auto-complete-config)
(require 'ac-math)
(require 'org-bullets)
(require 'ox)
(require 'ox-publish)
(require 'ox-latex)
(require 'ox-beamer)
(require 'ox-twbs)
(require 'parse-time)
(require 'org-ref)
#+END_SRC


* User functions
** Sample Documentation
#+BEGIN_SRC emacs-lisp
  (defun new-sample (arg)
    "insert a new org-mode chapter for a sample at the current cursor position"
    (interactive "sample name: ")
    (let ((sample (concat "mku" arg)))
      (let ((insertion
             (concat "* " (upcase sample) "\n"
                     "Questions to answer:\n\n"
                     "** Fabrication\n"
                     "#+name: " sample "-fab\n"
                     "| no | description | result | comment |\n"
                     "|----+-------------+--------+---------|\n"
                     "|    |             |        |         |\n"
                     "#+TBLFM: $1='(make-link-append-front \"" (downcase sample) "-fab\" $1)\n\n"

                     "** Results \n"
                     )))
        (insert insertion))))

  (defun sputter-step ()
    "insert a new org-mode table for a sputter step at the current cursor position"
    (interactive)
    (let ((tab-id (replace-regexp-in-string " " "-" (org-get-heading) t t)))
      (let ((insertion
             (concat
              "#+name: " tab-id "\n"
              "| element | power(W) | matching network(%:%) | MAN/AUT | dc voltage(V) | Ar flow(sccm) | base pressure(mbar) | sputter pressure(µbar) | Temperature(°C) |\n"
              "|---------+----------+-----------------------+---------+---------------+---------------+---------------------+------------------------+-----------------|\n"
              "|         |          |                       |         |               |               |                     |                        |                 |\n")))
        (insert insertion))))

  (defun resist-step ()
    "insert a new org-mode list template for resist coating step"
    (interactive)
    (let ((insertion
           (concat
            "- prebake=200°C, 1h\n"
            "- resist=AZECI3027 4000rpm 60s\n"
            "- softbake=100°C, 150s\n"
            "- litho\n"
            "  - focus=-0.394\n"
            "  - filling defocus=abs(focus) + 0.01\n"
            "  - modulation=5%,20%\n"
            "  - filter=1.0\n"
            "  - speed=0.5mm/s, 2.0mm/s\n"
            "- post exposure bake=none\n"
            "- developement=AZ726MIF 60s\n"
            "- comments\n"
            )))
      (insert insertion)))

  (defun plasma-etch-step ()
    "insert a new org-mode table for documenting a plasma-dry-etch step
  at the current cursor position"
    (interactive)
    (let ((tab-id (replace-regexp-in-string " " "-" (org-get-heading) t t)))
      (let ((insertion
             (concat
              "#+name: " tab-id "\n"
              "| desired plasma time | ignition time | Ton/s (Tcycle=1min) | Toff/s | total time/min |\n"
              "|---------------------+---------------+---------------------+--------+----------------|\n"
              "|                     |               |                     |        |                |\n"
              "#+TBLFM: @2$1=14*30::@2$4=60 - @2$3::@2$5='(let ((base (/ (string-to-number @2$1) (string-to-number @2$3)))) (+ base (round (/ (* base (string-to-number @2$2)) 20))))"
              )))
        (insert insertion))))


#+END_SRC
** time-string conversions
#+BEGIN_SRC emacs-lisp
  (defun round-to (n d)
    "round the number n to d specified decimals"
    (/ (fround (* (expt 10 d) n)) (expt 10 d)))

  (defun revert (l)
    "reverts a list"
    (cond
     ((null l) '())
     (t (append (revert (cdr l)) (list (car l))))))

  (defun time-to-list (s)
    "generates a list of numbers from :-separetd time string"
    (mapcar 'string-to-number (split-string s ":")))

  (defun multiply-lists (l mult acc)
    "multiplies each element of the lists and returns the sum of multiplied tuples"
    (cond
     ((null l) acc)
     (t (multiply-lists (cdr l) (cdr mult) (+ acc (* (car l) (car mult)))))))

  (defun make-seconds (s)
    "computes seconds form dd:hh:mm:ss time string" 
    (multiply-lists (revert (time-to-list s)) '(1 60 3600 86400) 0))

  (defun seconds-to-time (s)
    "generate time in hh:mm format from seconds"
    (let ((r (mod s 3600)))
      (cons (/ (- s r) 3600) (/ r 60))))

  (defun seconds-to-time-precise (s)
    "generate time in hh:mm:ss format from seconds"
    (let ((hr (mod s 3600)))
      (let ((mr (mod hr 60)))
        (concat
         (number-to-string (/ (- s hr) 3600))
         ":"
         (number-to-string (/ (- hr mr) 60))
         ":"
         (number-to-string mr)))))


  (defun minutes-to-time (s)
   "comma-separated minute-value to time mm:ss"
    (let ((f (floor s)))
      (concat
       (number-to-string f)
       ":"
       (number-to-string (round (* (- s f) 60))))))
#+END_SRC
** Helpers
#+BEGIN_SRC emacs-lisp
  (defun make-link (l)
    (cond
     ((< (length l) 3) (get-link l))
     ((not (equal (substring l 0 3) "[[*")) (get-link l))
     (t l)))

  (defun make-link-append-front (a l)
    (let ((to-link (concat a " " l)))
      (cond
       ((< (length l) 3)
        (get-link to-link))
       ((not (equal (substring l 0 3) "[[*")) 
        (get-link to-link))
       (t l))))

  (defun get-link (l)
    (concat "[[*" l "][" l "]]"))

  (defun a-to-nm (a)
    "convert Å to nm"
    (/ a 10.0))


  (defun nm-to-a (nm)
    "convert nm to Å"
    (* nm 10.0))
#+END_SRC

** Funciton Bindings
#+BEGIN_SRC emacs-lisp
  (fset 'to-num 'string-to-number)

  ;;(global-set-key (kbd "C-c C-g") 'linker)
#+END_SRC


* ToDo setup
** keywords and tags
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))

#+END_SRC


* Default settings

** global
#+BEGIN_SRC emacs-lisp
;; turn off #?!&/!!-bell
(setq ring-bell-function 'ignore)

#+END_SRC
** pdf-tools
#+BEGIN_SRC 
(pdf-tools-install)
(setq pdf-annot-activate-created-annotations t)
(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
TeX-source-correlate-start-server t)
#+END_SRC
 
** latex
#+BEGIN_SRC emacs-lisp
(add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
#'TeX-revert-document-buffer)
(add-to-list 'org-latex-classes
             '("beamer"
               "\\documentclass\[presentation\]\{beamer\}"
               ("\\section\{%s\}" . "\\section*\{%s\}")
               ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
               ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))


;; for export purposes
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)

#+END_SRC
** auto-complete
#+BEGIN_SRC emacs-lisp
(add-to-list 'ac-modes 'latex-mode) ; beware of using 'LaTeX-mode instead
(ac-set-trigger-key "TAB")
(ac-set-trigger-key "<tab>")
#+END_SRC

** dired
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook
	  (lambda ()
	    (dired-hide-details-mode)))
#+END_SRC
** org-mode
#+BEGIN_SRC emacs-lisp
;; pretty bullets
(add-hook 'org-mode-hook
	  (lambda ()
	    (org-bullets-mode t)
	    (auto-complete-mode t)))

;; auto-line breaks
(add-hook 'org-mode-hook
	  (lambda ()
	    (auto-fill-mode t)))

;; allow alphabetical numeration
(setq org-list-allow-alphabetical t)

;; publishing settings

(setq org-publish-project-alist
      '(
	("org-notes"
	 :base-directory "~/org/"
	 :base-extension "org"
	 :publishing-directory "~/public_html/"
	 :recursive t
	 :publishing-function org-twbs-publish-to-html
	 :with-sub-superscript nil
	 :headline-levels 4
	 :auto-preamble t
	 )

	("org-static"
	 :base-directory "~/org/"
	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
	 :publishing-directory "~/public_html/"
	 :recursive t
	 :publishing-function org-publish-attachment
	 )

	("org" :components ("org-notes" "org-static"))))

;; babel for latex
;; needed for code block evaluation
(org-babel-do-load-languages
 'org-babel-load-languages
 '((latex .t)
 (gnuplot .t)
 (python .t)))

;; evaluate code blocks without asking
(defun my-org-confirm-babel-evaluate (lang body)
  (not (or (string= lang "emacs-lisp") (string= lang "latex") (string= lang "elisp") (string= lang "gnuplot")))) 
(setq org-confirm-babel-evaluate #'my-org-confirm-babel-evaluate)

;; agenda toggle mode
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c l") 'org-store-link)

;; global agenda to-do file
(setq org-agenda-files (quote ("~/todo.org")))
;;(setq org-agenda-files (list "~/windows_home/Documents/prom"))
;;(setq org-agenda-files (quote ("/home/max/windows_home/Documents/prom/todo/todo.org")))
;; global target file for notes
(setq org-default-notes-file (concat org-directory "/notes.org"))

;;set priority range from A to C with default A
(setq org-highest-priority ?A)
(setq org-lowest-priority ?C)
(setq org-default-priority ?A)

;; set priority color
(setq org-priority-faces '((?A . (:foreground "FF6670" :weight bold))
			   (?B . (:foreground "F8FF42"))
			   (?C . (:foreground "60FFFF"))))

(define-key global-map (kbd "C-c c") 'org-capture)
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/todo.org" "Tasks")
         "* TODO %?\n %i\n %a")))
(org-reload)
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
;; require latex snippets in org mode
(defun my-org-latex-yas ()
  "Activate org and LaTeX yas expansion in org-mode buffers."
  (yas-minor-mode)
  (yas-activate-extra-mode 'latex-mode))

(add-hook 'org-mode-hook #'my-org-latex-yas)
#+END_SRC
** global enables
#+BEGIN_SRC emacs-lisp
(menu-bar-mode 1)
(tool-bar-mode -1)
(yas-global-mode 1)
(global-auto-complete-mode t)
#+END_SRC

** spotify
ID and Secret are imported in the ~.emacs~ config file from the
spotify secrets file
 #+BEGIN_SRC emacs-lisp
   ;;(define-key spotify-mode-map (kbd "C-c s") 'spotify-command-map)
   ;;(setq spotify-transport 'connect)
   #+END_SRC


* custom-set-variables
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#2e3436" "#a40000" "#4e9a06" "#c4a000" "#204a87" "#5c3566" "#729fcf" "#eeeeec"])
 '(custom-enabled-themes (quote (leuven)))
 '(package-selected-packages
   (quote
    (pdf-tools markdown-mode+ markdown-mode htmlize dirtree-prosjekt org-bullets dirtree yasnippet-snippets ox-twbs auto-complete-auctex auto-complete auctex))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC

